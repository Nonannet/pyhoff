import importlib
import inspect
import fnmatch
from io import TextIOWrapper
import os


def write_classes(f: TextIOWrapper, patterns: list[str], module_name: str, title: str, description: str = '', exclude: list[str] = []) -> None:
    """Write the classes to the file."""
    module = importlib.import_module(module_name)

    classes = [
        name for name, obj in inspect.getmembers(module, inspect.isclass)
        if (obj.__module__ == module_name and
            any(fnmatch.fnmatch(name, pat) for pat in patterns if pat not in exclude) and
            (obj.__doc__ and ('(Automatic generated stub)' not in obj.__doc__ or ' digital ' in obj.__doc__)) and
            obj.__doc__ and '(no I/O function)' not in obj.__doc__
            )
    ]

    if description:
        f.write(f'{description}\n\n')

    write_dochtree(f, title, classes)

    for cls in classes:
        with open(f'docs/source/_autogenerated/{cls}.md', 'w') as f2:
            f2.write(f'# {module_name}.{cls}\n')
            f2.write('```{eval-rst}\n')
            f2.write(f'.. autoclass:: {module_name}.{cls}\n')
            f2.write('   :members:\n')
            f2.write('   :show-inheritance:\n')
            f2.write('   :inherited-members:\n')
            if title not in ['Base classes', 'Bus coupler']:
                f2.write('   :exclude-members: select, parameters\n')
            f2.write('```\n\n')


def write_dochtree(f: TextIOWrapper, title: str, items: list[str]):
    f.write('```{toctree}\n')
    f.write(':maxdepth: 1\n')
    f.write(f':caption: {title}:\n')
    #f.write(':hidden:\n')
    for text in items:
        if not text.startswith('_'):
            f.write(f"{text}\n")
    f.write('```\n\n')


if __name__ == "__main__":
    # Ensure the output directory exists
    os.makedirs('docs/source/_autogenerated', exist_ok=True)

    with open('docs/source/_autogenerated/index.md', 'w') as f:
        f.write('# Classes and Modules\n\n')

        write_classes(f, ['BK*', 'WAGO_750_352'], 'pyhoff.devices', title='Bus coupler',
                    description='These classes are bus couplers and are used to connect the IO bus terminals to a Ethernet interface.')
        write_classes(f, ['KL*'], 'pyhoff.devices', title='Beckhoff bus terminals')
        write_classes(f, ['WAGO*'], 'pyhoff.devices', title='WAGO bus terminals', exclude=['WAGO_750_352'])
        write_classes(f, ['*Terminal*'], 'pyhoff.devices', title='Generic bus terminals')
        write_classes(f, ['*'], 'pyhoff', title='Base classes',
                    description='These classes are base classes for devices and are typically not used directly.')
        write_classes(f, ['*'], 'pyhoff.modbus', title='Modbus',
                    description='This modbus implementation is used internally.')
